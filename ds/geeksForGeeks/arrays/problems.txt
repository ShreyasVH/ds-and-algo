1. Find Transition Point

Given a sorted array, arr[] containing only 0s and 1s, find the transition point, i.e., the first index where 1 was observed, and before that, only 0 was observed.  If arr does not have any 1, return -1. If array does not have any 0, return 0.

Examples:

Input: arr[] = [0, 0, 0, 1, 1]
Output: 3
Explanation: index 3 is the transition point where 1 begins.

Input: arr[] = [0, 0, 0, 0]
Output: -1
Explanation: Since, there is no "1", the answer is -1.

Input: arr[] = [1, 1, 1]
Output: 0
Explanation: There are no 0s in the array, so the transition point is 0, indicating that the first index (which contains 1) is also the first position of the array.

Input: arr[] = [0, 1, 1]
Output: 1
Explanation: Index 1 is the transition point where 1 starts, and before it, only 0 was observed.

Constraints:
1 ≤ arr.size() ≤ 105
0 ≤ arr[i] ≤ 1

https://www.geeksforgeeks.org/problems/find-transition-point-1587115620/1?page=38&category=Arrays&sortBy=latest

class Solution {
    int transitionPoint(int arr[]) {
        // code here
    }
}

------------------------------------------------------------------------------------------------------------------------------------------
2. Queue Using Array

Implement a Queue using an Array. Queries in the Queue are of the following type:
(i) 1 x   (a query of this type means  pushing 'x' into the queue)
(ii) 2     (a query of this type means to pop an element from the queue and print the popped element. If the queue is empty then return -1)

We just have to implement the functions push and pop and the driver code will handle the output.

Examples:

Input: Queries = 1 2 1 3 2 1 4 2
Output: 2 3
Explanation: For query 1 2 the queue will be {2} 1 3 the queue will be {2 3} 2   poped element will be 2 the queue will be {3} 1 4 the queue will be {3 4} 2 poped element will be 3 

Input: Queries = 1 3 2 2 1 4   
Output: 3 -1
Explanation: For query 1 3 the queue will be {3} 2 poped element will be 3 the queue will be empty 2 there is no element in the queue and hence -1 1 4 the queue will be {4}. 

Input: Queries = 1 3 2 2 1 3   
Output: 3 -1
Explanation: For query 1 3 the queue will be {3} 2 poped element will be 3 the queue will be empty 2 there is no element in the queue and hence -1 1 3 the queue will be {3} and hence -1 1 3 the queue will be {3}.

Constraints:
1 ≤ number of query≤ 105
0 ≤ x ≤ 105

https://www.geeksforgeeks.org/problems/implement-queue-using-array/1?page=38&category=Arrays&sortBy=latest

class MyQueue {

    int front, rear;
	int arr[] = new int[100005];

    MyQueue()
	{
		front=0;
		rear=0;
	}
	
	//Function to push an element x in a queue.
	void push(int x)
	{
	    // Your code here
	} 

    //Function to pop an element from queue and return that element.
	int pop()
	{
		// Your code here
	} 
}

------------------------------------------------------------------------------------------------------------------------------------------
3. The Celebrity Problem

A celebrity is a person who is known to all but does not know anyone at a party. A party is being organized by some people. A square matrix mat[][] (n*n) is used to represent people at the party such that if an element of row i and column j is set to 1 it means ith person knows jth person. You need to return the index of the celebrity in the party, if the celebrity does not exist, return -1.

Note: Follow 0-based indexing.

Examples:

Input: mat[][] = [[1, 1, 0], [0, 1, 0], [0, 1, 1]]
Output: 1
Explanation: 0th and 2nd person both know 1st person. Therefore, 1 is the celebrity person. 

Input: mat[][] = [[1, 1], [1, 1]]
Output: -1
Explanation: Since both the people at the party know each other. Hence none of them is a celebrity person.

Input: mat[][] = [[1]]
Output: 0

Constraints:
1 <= mat.size()<= 1000
0 <= mat[i][j]<= 1
mat[i][i] == 1

https://www.geeksforgeeks.org/problems/the-celebrity-problem/1?page=38&category=Arrays&sortBy=latest

class Solution {
    public int celebrity(int mat[][]) {
        // code here
        
    }
}

------------------------------------------------------------------------------------------------------------------------------------------
4. Largest subarray with 0 sum

Given an array arr containing both positive and negative integers, the task is to compute the length of the largest subarray that has a sum of 0.

Examples:

Input: arr[] = [15, -2, 2, -8, 1, 7, 10, 23]
Output: 5
Explanation: The largest subarray with a sum of 0 is [-2, 2, -8, 1, 7].

Input: arr[] = [2, 10, 4]
Output: 0
Explanation: There is no subarray with a sum of 0.

Input: arr[] = [1, 0, -4, 3, 1, 0]
Output: 5
Explanation: The subarray is [0, -4, 3, 1, 0].

Constraints:
1 ≤ arr.size() ≤ 106
−103 ≤ arr[i] ≤ 103, for each valid i

https://www.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1?page=38&category=Arrays&sortBy=latest

class Solution {
    int maxLen(int arr[]) {
        // code here
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
5. Max sum in the configuration

Given an integer array(0-based indexing) arr[]. Find the maximum value of the sum of i*arr[i] for all 0 <= i <= arr.size()-1, where arr[i] is the element at index i in the arr[]. The only operation allowed is to rotate(clockwise or counterclockwise) the array any number of times.

Examples :

Input: arr[] = [8, 3, 1, 2]
Output: 29
Explanation: Out of all the possible configurations by rotating the elements: arr[] = [3, 1, 2, 8] here (3*0) + (1*1) + (2*2) + (8*3) sum is maximum i.e. 29.

Input: arr[] = [1, 2, 3]
Output: 8
Explanation: Out of all the possible configurations by rotating the elements: arr[] = [1, 2, 3] here (1*0) + (2*1) + (3*2) sum is maximum i.e. 8.

Input: arr[] = [4, 13]
Output: 13

Constraints:
1<=arr.size()<=104
1<=arr[i]<=20

https://www.geeksforgeeks.org/problems/max-sum-in-the-configuration/1?page=38&category=Arrays&sortBy=latest

class Solution {
    int maxSum(int[] arr) {
        // Your code here
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
6. 
------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------