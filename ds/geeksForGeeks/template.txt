/*
Reverse a linked list

You are given the head of a singly linked list. You have to reverse the linked list and return the head of the reversed list.

Examples:

Input:
      
Output: 4 -> 3 -> 2 -> 1
Explanation: After reversing the linkedList
      
Input: 
      
Output: 8 -> 9 -> 10 -> 7 -> 2
Explanation: After reversing the linked list
      
Input: 
      
Output: 8
Explanation:
       
Constraints:
1 ≤ number of nodes ≤ 10^5
1 ≤ node->data ≤ 10^5

*/

package ds.geeksForGeeks;

import java.util.*;
import utils.*;
import java.lang.reflect.Constructor;

public class Problem6
{
	public static void main(String args[]) throws Exception
	{

		Class<?> clazz = new Object() {}.getClass().getEnclosingClass();

        Constructor<?> constructor = clazz.getDeclaredConstructor();
        Object problem = constructor.newInstance();

        int[][] points = {{1, 1}, {3, 4}, {-1, 0}};
        System.out.println((int) clazz.getMethod("minTimeToVisitAllPoints", int[][].class).invoke(problem, points));

        System.out.println("-------------------------------------------------------");

        points = new int[][]{{3, 2}, {-2, 2}};
        System.out.println((int) clazz.getMethod("minTimeToVisitAllPoints", int[][].class).invoke(problem, points));
	}

	public int problem(int[][] points) {
        
    }
}


/*
Time complexity: 
Space complexity: 
*/